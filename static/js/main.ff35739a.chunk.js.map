{"version":3,"sources":["api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/store.ts","features/Login/Login.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","email","password","rememberMe","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","param","thunkAPI","res","resultCode","rejectWithValue","errors","fieldsErrors","err","undefined","logoutTC","arg","clearDataAC","authSlice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","isLoggedValue","extraReducers","builder","addCase","fulfilled","actions","initializeAppTC","appSlice","isInitialized","fetchTasksTC","todolistID","tasks","items","addTaskTC","changeTodolistEntityStatusAC","task","item","removeTaskTC","updateTaskStatusTC","getState","allTasksFromState","tasksForCurrentTodolist","find","t","description","priority","startDate","deadline","updateTaskTitleTC","tasksSlice","addTodoListTC","todolist","removeTodolistTC","fetchTodoListsTC","todolists","forEach","todoListId","push","taskIndex","findIndex","splice","tl","changeTodolistTitleTC","todolistsSlice","changeTodolistFilterAC","index","filter","entityStatus","build","map","AddItemForm","React","memo","disabled","props","console","log","useState","setTitle","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","todolistStatus","useSelector","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","auth","useEffect","thunk","changeStatus","newTitle","addTodolist","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","sx","width","rootReducer","combineReducers","reducer","store","configureStore","middleware","getDefaultMiddleware","prepend","useAppDispatch","window","Login","formik","useFormik","initialValues","validate","values","test","onSubmit","formikHelpers","resetForm","rejected","match","setFieldError","field","setFieldTouched","Error","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff35739a.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '44d03ca4-768d-467d-8495-5db696fe39cb'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login({email, password, rememberMe}:LoginParamsType) {\r\n        const promise = instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>(\"auth/login\", {email, password, rememberMe})\r\n        return promise\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType>(\"auth/login\")\r\n        return promise\r\n    },\r\n    me() {\r\n        const promise =  instance.get <ResponseType<{ id: number, email: string, login: string}>>(\"auth/me\")\r\n        return promise\r\n    }\r\n}\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type     LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<{ error: string, field: string }>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC, setAppStatusAC} from \"../app/app-reducer\";\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\n\r\n// generic function\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error:'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string} , dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n    dispatch(setAppErrorAC({error: error.message}))\r\n}\r\n","import {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {clearDataAC} from \"../TodolistsList/todolists-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n//thunks\r\nexport const loginTC = createAsyncThunk<undefined, LoginParamsType,\r\n    { rejectValue: { errors: Array<string>, fieldsErrors: Array<{ error: string, field: string }> | undefined } }\r\n    >\r\n('auth/login', async (param, thunkAPI) => {\r\n\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n            return;\r\n\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (error) {\r\n        const err = error as AxiosError<any>\r\n        handleServerNetworkError(err, thunkAPI.dispatch);\r\n        return thunkAPI.rejectWithValue({errors: [err.message], fieldsErrors: undefined})\r\n    }\r\n})\r\n\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (arg, thunkAPI) =>{\r\n    thunkAPI.dispatch(setAppStatusAC({status:'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n            thunkAPI.dispatch(clearDataAC());\r\n            return;\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    }\r\n    catch (error) {\r\n        const err = error as AxiosError\r\n            handleServerNetworkError(err, thunkAPI.dispatch);\r\n        return thunkAPI.rejectWithValue({})\r\n        }\r\n})\r\n\r\n//state\r\nconst initialState: AuthReducerStateType = {\r\n    isLoggedIn: false\r\n\r\n}\r\ntype AuthReducerStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\n//reducer\r\nexport const authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state , action: PayloadAction<{isLoggedValue: boolean}>) {\r\n            state.isLoggedIn = action.payload.isLoggedValue\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(loginTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = true\r\n        })\r\n        builder.addCase(logoutTC.fulfilled, (state, action) => {\r\n            state.isLoggedIn = false\r\n        })\r\n    }\r\n})\r\n\r\nexport const {setIsLoggedInAC} = authSlice.actions\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n//thunks\r\nexport const initializeAppTC = createAsyncThunk('app/initializeApp', async (arg, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await authAPI.me()\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setIsLoggedInAC({isLoggedValue: true}));\r\n                thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n            } else {\r\n                handleServerAppError(res.data, thunkAPI.dispatch);\r\n            }\r\n            return ;// thunkAPI.dispatch(setAppInitializedAC({value: true}))\r\n        } catch (error) {\r\n            const err = error as AxiosError\r\n            handleServerNetworkError(err, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    }\r\n)\r\n\r\n//state\r\nexport const initialState: AppReducerStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\n//reducer\r\nexport const appSlice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state , action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{error: string | null}>) {\r\n            state.error = action.payload.error\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n    builder.addCase(initializeAppTC.fulfilled, (state, action) => {\r\n        state.isInitialized = true\r\n    })\r\n    }}\r\n)\r\n\r\nexport const {setAppStatusAC, setAppErrorAC} = appSlice.actions\r\n\r\n//types\r\nexport type AppReducerStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n","import {\r\n    addTodoListTC,\r\n    changeTodolistEntityStatusAC,\r\n    clearDataAC,\r\n    fetchTodoListsTC,\r\n    removeTodolistTC\r\n} from './todolists-reducer';\r\nimport {TaskStatuses, TaskType, todolistsAPI } from '../../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n//thunks\r\nexport const fetchTasksTC = createAsyncThunk(\r\n    'tasks/fetchTasks', async (todolistID: string, thunkAPI) => {\r\n\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n\r\n        const res = await todolistsAPI.getTasks(todolistID)\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return {tasks: res.data.items, todolistId: todolistID}\r\n        }\r\n\r\n)\r\n\r\nexport const addTaskTC = createAsyncThunk(\r\n    'tasks/addTask', async ({todolistId, title}: {todolistId: string, title: string}, thunkAPI) => {\r\n\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n        thunkAPI.dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTask(todolistId, title)\r\n        if (res.data.resultCode === 0) {\r\n            // thunkAPI.dispatch(addTaskAC({task: res.data.data.item}));\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n            thunkAPI.dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'succeeded'}))\r\n            return {task: res.data.data.item};\r\n        }\r\n        else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n\r\n    } catch (error) {\r\n            const err = error as AxiosError\r\n            handleServerNetworkError(err, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({})\r\n    }}\r\n)\r\n\r\nexport const removeTaskTC = createAsyncThunk(\r\n    'tasks/removeTask', async ({taskId, todolistId}: {taskId: string, todolistId: string}, thunkAPI) => {\r\n\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n        thunkAPI.dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.deleteTask(todolistId, taskId)\r\n            if (res.data.resultCode === 0) {\r\n                // dispatch(removeTaskAC({taskId: taskId, todolistId: todolistId}))\r\n                thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n                thunkAPI.dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'succeeded'}))\r\n                return {taskId: taskId, todolistId: todolistId}\r\n            }\r\n            else {\r\n                handleServerAppError(res.data, thunkAPI.dispatch);\r\n                return thunkAPI.rejectWithValue({})\r\n            }\r\n\r\n        } catch (error) {\r\n            const err = error as AxiosError\r\n            handleServerNetworkError(err, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({})\r\n        }}\r\n)\r\n\r\nexport const updateTaskStatusTC = createAsyncThunk(\r\n    'tasks/updateTaskStatus', async ({taskId, todolistId, status}: {taskId: string, todolistId: string, status: TaskStatuses}, thunkAPI) => {\r\n\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n        const state = thunkAPI.getState() as AppRootStateType\r\n        const allTasksFromState = state.tasks\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find( t => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        if (task) {\r\n            try {\r\n            const res = await todolistsAPI.updateTask(todolistId, taskId, {\r\n                title: task.title,\r\n                description: task.description,\r\n                status: status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline\r\n            })\r\n            if (res.data.resultCode === 0) {\r\n               // dispatch(changeTaskStatusAC({taskId: taskId, status: status, todolistId: todolistId}))\r\n                thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n                return {taskId: taskId, status: status, todolistId: todolistId}\r\n            }\r\n            else {\r\n                handleServerAppError(res.data, thunkAPI.dispatch);\r\n                return thunkAPI.rejectWithValue({})\r\n            }\r\n\r\n        } catch (error) {\r\n            const err = error as AxiosError\r\n            handleServerNetworkError(err, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({})\r\n        }} else {\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    }\r\n)\r\n\r\nexport const updateTaskTitleTC = createAsyncThunk(\r\n    'tasks/updateTaskTitle', async ({taskId, todolistId, title}: {taskId: string, todolistId: string, title: string}, thunkAPI) => {\r\n\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n\r\n        const state = thunkAPI.getState() as AppRootStateType\r\n        const allTasksFromState = state.tasks\r\n        const tasksForCurrentTodolist = allTasksFromState[todolistId]\r\n        const task = tasksForCurrentTodolist.find( t => {\r\n            return t.id === taskId\r\n        })\r\n\r\n        if (task) {\r\n            try {\r\n                const res = await todolistsAPI.updateTask(todolistId, taskId, {\r\n                    title: title,\r\n                    description: task.description,\r\n                    status: task.status,\r\n                    priority: task.priority,\r\n                    startDate: task.startDate,\r\n                    deadline: task.deadline\r\n                })\r\n                if (res.data.resultCode ===  0) {\r\n                   // dispatch(changeTaskTitleAC({taskId: taskId, title: title, todolistId: todolistId}))\r\n                    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n                    return {taskId: taskId, title: title, todolistId: todolistId}\r\n                }\r\n                else {\r\n                    handleServerAppError(res.data, thunkAPI.dispatch);\r\n                    return thunkAPI.rejectWithValue({})\r\n                }\r\n\r\n            } catch (error) {\r\n                const err = error as AxiosError\r\n                handleServerNetworkError(err, thunkAPI.dispatch);\r\n                return thunkAPI.rejectWithValue({})\r\n            }} else {\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    }\r\n)\r\n\r\n//state\r\nconst initialState: TasksStateType = {}\r\n\r\n//reducer\r\nexport const tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n\r\n        builder.addCase(addTodoListTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(fetchTodoListsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach(t => {\r\n                state[t.id] = []\r\n            })\r\n        });\r\n        builder.addCase(clearDataAC, (state) => {\r\n            state = {}\r\n        });\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        });\r\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\r\n            state[action.payload.task.todoListId].push(action.payload.task);\r\n        });\r\n        builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const taskIndex = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            tasks.splice(taskIndex, 1);\r\n        });\r\n        builder.addCase(updateTaskStatusTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const taskIndex = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            tasks[taskIndex].status = action.payload.status\r\n        });\r\n        builder.addCase(updateTaskTitleTC.fulfilled, (state, action) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const taskIndex = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            tasks[taskIndex].title = action.payload.title\r\n        });\r\n\r\n    }\r\n    })\r\n\r\nexport const {} = tasksSlice.actions\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type TasksStateDomainType = TasksStateType & {\r\n    entityStatus: RequestStatusType\r\n}","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from \"redux\";\r\nimport {\r\n    RequestStatusType,\r\n    setAppStatusAC\r\n} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {fetchTasksTC} from \"./tasks-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n//thunks\r\nexport const fetchTodoListsTC = createAsyncThunk(\r\n    'todolists/fetchTodoLists', async (arg, thunkAPI) => {\r\n\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n        const res = await todolistsAPI.getTodolists()\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}));\r\n        res.data.forEach(tl => {\r\n            thunkAPI.dispatch(fetchTasksTC(tl.id))\r\n        })\r\n        return {todolists: res.data}\r\n\r\n\r\n    }\r\n)\r\n\r\nexport const addTodoListTC = createAsyncThunk(\r\n    'todolists/addTodoList', async (title: string, {dispatch, rejectWithValue}) => {\r\n\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.createTodolist(title)\r\n            if (res.data.resultCode === 0) {\r\n              //  dispatch(addTodolistAC({todolist: res.data.data.item}));\r\n                dispatch(setAppStatusAC({status: 'succeeded'}));\r\n                return {todolist: res.data.data.item}\r\n            }\r\n            else {\r\n                handleServerAppError(res.data, dispatch);\r\n                return rejectWithValue({})\r\n            }\r\n\r\n        } catch (error) {\r\n            const err = error as AxiosError\r\n            handleServerNetworkError(err, dispatch);\r\n            return rejectWithValue({})\r\n        }}\r\n)\r\n\r\nexport const removeTodolistTC = createAsyncThunk(\r\n    'todolists/removeTodolist', async (todolistId: string, {dispatch, rejectWithValue}) => {\r\n\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.deleteTodolist(todolistId)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}));\r\n                return {id: todolistId}\r\n            }\r\n            else {\r\n                handleServerAppError(res.data, dispatch);\r\n                return rejectWithValue({})\r\n            }\r\n\r\n        } catch (error) {\r\n            const err = error as AxiosError\r\n            handleServerNetworkError(err, dispatch);\r\n            return rejectWithValue({})\r\n        }}\r\n)\r\n\r\nexport const changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle',\r\n    async ({todolistId, title}: {todolistId: string, title: string}, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(todolistId, title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}));\r\n            dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'succeeded'}))\r\n            return {id: todolistId, title: title}\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n            return rejectWithValue({})\r\n        }\r\n    } catch (error) {\r\n            const err = error as AxiosError\r\n            handleServerNetworkError(err, dispatch);\r\n            return rejectWithValue({})\r\n        }\r\n})\r\n\r\n\r\n//state\r\nconst initialState: Array<TodolistDomainType> = [\r\n    /*{id: todolistId1, title: 'What to learn', filter: 'all', addedDate: '', order: 0},\r\n    {id: todolistId2, title: 'What to buy', filter: 'all', addedDate: '', order: 0}*/\r\n]\r\n\r\n//reducer\r\nexport const todolistsSlice = createSlice({\r\n    name: 'todolists',\r\n    initialState,\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{id: string, filter: FilterValuesType}>) {\r\n            let index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].filter = action.payload.filter;\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{id: string, status: RequestStatusType}>) {\r\n            let index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].entityStatus = action.payload.status;\r\n        },\r\n        clearDataAC(state) {\r\n            state = [];\r\n        },\r\n    },\r\n    extraReducers: (build) => {\r\n        build.addCase(fetchTodoListsTC.fulfilled, (state, action) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter:<FilterValuesType> 'all', entityStatus: 'idle'}))\r\n        })\r\n        build.addCase(addTodoListTC.fulfilled, (state, action) => {\r\n            state.push({...action.payload.todolist, filter:<FilterValuesType> 'all', entityStatus: 'idle'});\r\n        })\r\n        build.addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id);\r\n            if (index > -1) {\r\n                state.splice(index, 1);\r\n            }\r\n        })\r\n        build.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n            let index = state.findIndex(tl => tl.id === action.payload.id);\r\n            state[index].title = action.payload.title;\r\n        })\r\n}\r\n})\r\n\r\nexport const { changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC, clearDataAC} = todolistsSlice.actions;\r\n\r\n//types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({disabled = false, ...props}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={disabled}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} disabled={props.disabled}/>\r\n        : <span onDoubleClick={activateEditMode} >{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../../app/store\";\r\nimport {RequestStatusType} from \"../../../../app/app-reducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n\r\n    const todolistStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.todolists.filter(tl => tl.id === props.todolistId)[0].entityStatus);\r\n\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler} disabled={todolistStatus === 'loading'}/>\r\n        <IconButton onClick={onClickHandler} disabled={todolistStatus === 'loading'}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {fetchTodoListsTC, FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {fetchTasksTC} from \"../tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n    const dispatch = useDispatch();\r\n\r\n    ///ВМЕСТО ТДИСПАТЧА ТАСОК ЗДЕСЬ, СДЕЛАЛИ ЭТО В TODOLISTS-REDUCER ПОСЛЕ FETCH-TODOLISTS\r\n    // useEffect (() => {\r\n    //     // if (demo) {\r\n    //     //     return\r\n    //     // }\r\n    //     dispatch(fetchTasksTC(props.todolist.id));\r\n    // }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle} disabled={props.todolist.entityStatus === 'loading'}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    addTodoListTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodoListsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from \"./todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskStatusTC, updateTaskTitleTC} from \"./tasks-reducer\";\r\nimport {TaskStatuses} from \"../../api/todolists-api\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType>((state) => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodoListsTC());\r\n    }, [])\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId: id, todolistId: todolistId});\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC({todolistId: todolistId, title: title})\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskStatusTC({taskId: id, todolistId: todolistId, status: status});\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTitleTC({taskId: id, todolistId: todolistId, title: newTitle});\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value});\r\n        dispatch(action);\r\n    }, []);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id);\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC({todolistId: id, title: title});\r\n        dispatch(thunk);\r\n    }, []);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodoListTC(title);\r\n        dispatch(thunk);\r\n    }, [dispatch]);\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id];\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}","import React, { useState } from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const dispatch = useDispatch();\r\n    const error = useSelector<AppRootStateType, string | null>((state) => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    };\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n               {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n\r\n","import {tasksSlice} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsSlice} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {appSlice} from \"./app-reducer\";\r\nimport {authSlice} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksSlice.reducer,\r\n    todolists: todolistsSlice.reducer,\r\n    app: appSlice.reducer,\r\n    auth: authSlice.reducer,\r\n})\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\n\r\nexport type RootReducerType = typeof rootReducer\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppDispatchType = typeof store.dispatch\r\nexport const useAppDispatch: () => AppDispatchType = useDispatch\r\n\r\n// @ts-ignore\r\n\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField} from \"@mui/material\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {FormikErrors, FormikHelpers, useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppDispatchType, AppRootStateType, useAppDispatch} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype FormikErrorType   = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n\r\n        validate: (values) => {\r\n            let errors: FormikErrors<FormikErrorType> = {};\r\n            if (!values.email) {\r\n                errors.email = \"Email is required\"\r\n            }\r\n            else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n                if (!values.password) {\r\n                    errors.password = \"Password is required\"\r\n                }\r\n            else if (values.password.length < 2) {\r\n                errors.password = \"Password must be more than 2 cymbols\"\r\n            }\r\n            return errors\r\n        },\r\n\r\n        onSubmit: async (values, formikHelpers) => {\r\n            // alert(JSON.stringify(values.email));\r\n            formik.resetForm();\r\n            const action = await dispatch(loginTC(values));\r\n            if (loginTC.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    formikHelpers.setFieldError(action.payload.fieldsErrors[0].field, action.payload.fieldsErrors[0].error);\r\n                    formikHelpers.setFieldTouched(action.payload.fieldsErrors[0].field)\r\n                }\r\n                else {\r\n                    new Error ('error: Some error')\r\n                }\r\n            }\r\n        },\r\n    });\r\n    console.log(formik)\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType>((state) => state.auth.isLoggedIn)\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <FormGroup>\r\n                    <TextField label=\"Email\" margin=\"normal\" {...formik.getFieldProps(\"email\")}\r\n                               // onBlur={formik.handleBlur}\r\n                    />\r\n                    {formik.touched.email && formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n\r\n                    <TextField type=\"password\" label=\"Password\" margin=\"normal\" {...formik.getFieldProps(\"password\")}\r\n                               // onBlur={formik.handleBlur}\r\n                    />\r\n                    {formik.touched.password && formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n\r\n                    <FormControlLabel label={'Remember me'} control={<Checkbox/>} {...formik.getFieldProps(\"rememberMe\")}\r\n                    />\r\n\r\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                        Login\r\n                    </Button>\r\n\r\n                </FormGroup>\r\n            </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport {CircularProgress, LinearProgress} from \"@mui/material\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {BrowserRouter, Route, Routes} from \"react-router-dom\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\nimport {removeTaskTC} from \"../features/TodolistsList/tasks-reducer\";\r\n\r\n\r\n\r\n\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App ({demo = false}: PropsType) {\r\n\r\n    const dispatch = useDispatch();\r\n    const status = useSelector<AppRootStateType, RequestStatusType >((state) => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType>((state) => state.auth.isLoggedIn)\r\n    const isInitialized = useSelector<AppRootStateType>((state) => state.app.isInitialized)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC());\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback( () => {\r\n        dispatch(logoutTC())\r\n    }, []);\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <div style={{position:'fixed', top: '30%', textAlign: 'center', width:'100%' }}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <ErrorSnackbar />\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === \"loading\" && <LinearProgress />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                        <Route path=\"/\" element={<TodolistsList/>}/>\r\n                        <Route path=\"/login\" element={<Login/>}/>\r\n                        {/*<Route path=\"*\" element={<Navigate to={\"/404\"}/>}/>*/}\r\n                        <Route path=\"/404\" element={<h1>404. PAGE NOT FOUND</h1>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './app/store';\r\nimport {BrowserRouter, HashRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}